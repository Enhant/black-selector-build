{"version":3,"sources":["components/BlackMenuListElement.tsx","hooks/useForkRef.js","components/BlackSelect/components/MenuList.tsx","components/BlackSelect/components/Popover.tsx","utils/setRef.js","components/BlackSelect/components/Menu.tsx","components/BlackSelect/index.tsx","hooks/useControlled.ts","utils/ownerDocument.js","App.tsx","index.tsx"],"names":["useStyles","createUseStyles","menuListElement","fontSize","color","listStyle","cursor","background","selectedMenuList","BlackMenuListElement","props","classes","className","clsx","listElementClassName","selected","onClick","tabIndex","onKeyDown","displayedValue","setRef","ref","value","current","menu","backgroundColor","position","padding","positionStyle","top","left","MenuList","forwardRef","listClassName","items","id","popover","width","height","overflow","Popover","React","onClose","role","children","Menu","isOpen","anchorRef","marginThreshold","useState","document","createElement","containerEl","useEffect","body","appendChild","removeChild","getPositionStyle","useCallback","element","offsetTop","offsetLeft","Math","round","contentAnchorRef","useRef","activeItemIndex","Children","map","child","index","isValidElement","disabled","cloneElement","instance","getItems","createPortal","handleListKeyDown","event","key","preventDefault","isEmpty","displayValue","trim","BlackSelect","refA","refB","ariaLabel","readOnly","name","inputRefProp","autoFocus","labelId","defaultValue","valueProp","onChange","onOpen","openProp","openSelect","label","labelColor","displayClassName","inputRef","displayNode","setDisplayNode","openState","setOpenState","handleRef","useMemo","refValue","isOpenControlled","menuRef","controlled","defaultProp","default","isControlled","undefined","valueState","setValue","newValue","useControlled","useImperativeHandle","focus","node","labelElem","ownerDocument","getElementById","handler","getSelection","isCollapsed","addEventListener","removeEventListener","display","focusNextElem","list","listElem","nextElementSibling","firstChild","focusPrevElem","previousElementSibling","lastChild","keyboardListElemActions","focusListElemFunction","nextFocusListElem","handleKeyDown","e","activeListElem","activeElement","indexOf","update","childrenArray","toArray","style","a","b","ent1","Object","entries","ent2","length","every","areEqualValues","listElementChild","persist","onKeyUp","handleItemKeyDown","onMouseDown","button","Array","isArray","join","console","log","target","input","defaultLabel","dangerouslySetInnerHTML","__html","defaultSelectorInputStyles","aria-disabled","aria-haspopup","aria-label","bottom","opacity","pointerEvents","minWidth","border","borderColor","transform","paddingTop","Number","isInteger","selectStyles","marginLeft","borderBottom","margin","App","selectors","value1","setValue1","value2","setValue2","menuProps","ReactDOM","render","StrictMode"],"mappings":"2NAKMA,EAAYC,YAAgB,CAC9BC,gBAAiB,CACbC,SAAU,GACVC,MAAO,QACPC,UAAW,OACXC,OAAQ,UACR,mBAAoB,CAChBC,WAAY,SAGpBC,iBAAkB,CACdJ,MAAO,QACPG,WAAY,WAsBLE,EAlBc,SAACC,GAC1B,IAAMC,EAAUX,IAChB,OACI,wBACIY,UAAWC,YACPF,EAAQT,gBACRQ,EAAMI,qBACNJ,EAAMK,UAAYJ,EAAQH,kBAE9BQ,QAASN,EAAMM,QACfC,SAAU,EACVC,UAAWR,EAAMQ,WAEhBR,EAAMS,iBChCbC,EAAS,SAAUC,EAAKC,GACP,oBAARD,EACPA,EAAIC,GACGD,IACPA,EAAIE,QAAUD,ICDtB,IAAMtB,EAAYC,YAAkE,CAChFuB,KAAM,CACFC,gBAAiB,QACjBC,SAAU,QACVC,QAAS,GAEbC,cAAe,CACXC,IAAK,gBAAGD,EAAH,EAAGA,cAAH,cAAuBA,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAeC,KAC3CC,KAAM,gBAAGF,EAAH,EAAGA,cAAH,cAAuBA,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAeE,SAsBrCC,EAlBEC,sBACb,SAACtB,EAAuBW,GAAsC,IAClDY,EAAwCvB,EAAxCuB,cAAeC,EAAyBxB,EAAzBwB,MAAON,EAAkBlB,EAAlBkB,cACxBjB,EAAUX,EAAU,CAAE4B,kBAC5B,OACI,wBACIhB,UAAWC,YAAKF,EAAQa,KAAMS,EAAetB,EAAQiB,eACrDP,IAAKA,EACLJ,SAAU,EACVC,UAAWR,EAAMQ,UACjBiB,GAAIzB,EAAMyB,IAETD,MCzBXlC,EAAYC,YAAgB,CAC9BmC,QAAS,CACLC,MAAO,QACPC,OAAQ,QACRZ,SAAU,WACVG,IAAK,EACLU,SAAU,YAaHC,EATCC,IAAMT,YAAW,SAACtB,EAAiBW,GAC/C,IAAMV,EAAUX,IAChB,OACI,yBAAKY,UAAWD,EAAQyB,QAASf,IAAKA,EAAKL,QAASN,EAAMgC,QAASC,KAAK,WACnEjC,EAAMkC,aCVJxB,MARf,SAAgBC,EAAKC,GACE,oBAARD,EACPA,EAAIC,GACGD,IACPA,EAAIE,QAAUD,IC+FPuB,EA5FFb,sBAAyC,SAACtB,EAAOW,GAAS,IAC3DuB,EAAkFlC,EAAlFkC,SAAUF,EAAwEhC,EAAxEgC,QAASI,EAA+DpC,EAA/DoC,OAAQC,EAAuDrC,EAAvDqC,UAD+B,EACwBrC,EAA5CsC,uBADoB,MACF,GADE,EACEf,EAAsBvB,EAAtBuB,cAAeE,EAAOzB,EAAPyB,GADjB,EAG5Cc,mBAASC,SAASC,cAAc,QAA/CC,EAH2D,oBAKlEC,qBAAU,WAEN,OADAH,SAASI,KAAKC,YAAYH,GACnB,WACHF,SAASI,KAAKE,YAAYJ,OAIlC,IAAMK,EAAmBC,uBACrB,SAACC,GACG,IAAI9B,EAAM8B,EAAQC,UACZ9B,EAAO6B,EAAQE,WACjBhC,EAAMmB,IAENnB,GADaA,EAAMmB,GAGvB,MAAO,CACHnB,IAAKiC,KAAKC,MAAMlC,GAChBC,KAAMgC,KAAKC,MAAMjC,MAGzB,CAACiB,EAAWC,IAGVgB,EAAmBC,iBAAoC,MAYzDC,GAAmB,EAEvBC,WAASC,IAAIxB,GAAU,SAACyB,EAAOC,GACtBC,yBAAeF,KAIfA,EAAM3D,MAAM8D,WACTH,EAAM3D,MAAMK,WAAiC,IAArBmD,KACxBA,EAAkBI,OAK9B,IAiBMpC,EAjBW,SAACU,GAAD,OACbuB,WAASC,IAAIxB,GAAU,SAACyB,EAAOC,GAC3B,OAAIA,IAAUJ,EACHzB,IAAMgC,aAAaJ,EAA6B,CACnDhD,IAAK,SACDqD,GAEAV,EAAiBzC,QAAUmD,EAE3BtD,EAAM,OAACiD,QAAD,IAACA,OAAD,EAACA,EAAOhD,IAAKqD,MAKxBL,KAGDM,CAAS/B,GAEvB,OAAIE,EACO8B,uBACH,kBAAC,EAAD,CAASlC,QAASA,EAASmC,kBA7CT,SAACC,GACL,QAAdA,EAAMC,MACND,EAAME,iBAEFtC,GACAA,EAAQoC,MAyCR,kBAAC,EAAD,CACI5C,MAAOA,EACPb,IAAKA,EACLY,cAAeA,EACfL,cAAe6B,EAAiBV,GAChC7B,UAAWR,EAAMQ,UACjBiB,GAAIA,KAGZiB,GAID,iCCrFX,SAAS6B,EAAQC,GACb,OAAuB,MAAhBA,GAAiD,kBAAjBA,IAA8BA,EAAaC,OAsBtF,IAAMC,EAAc3C,IAAMT,YAA2C,SAACtB,EAAOW,GAAS,ILxBnDgE,EAAMC,EK0BjCd,EAkBA9D,EAlBA8D,SACAe,EAiBA7E,EAjBA6E,UACAC,EAgBA9E,EAhBA8E,SACAC,EAeA/E,EAfA+E,KACAC,EAcAhF,EAdAgF,aACAC,EAaAjF,EAbAiF,UACAC,EAYAlF,EAZAkF,QACAC,EAWAnF,EAXAmF,aACOC,EAUPpF,EAVAY,MACAyE,EASArF,EATAqF,SACAnD,EAQAlC,EARAkC,SACAoD,EAOAtF,EAPAsF,OACAtD,EAMAhC,EANAgC,QACYuD,EAKZvF,EALAwF,WACAC,EAIAzF,EAJAyF,MACAlE,EAGAvB,EAHAuB,cACAmE,EAEA1F,EAFA0F,WACAC,EACA3F,EADA2F,iBAGE1F,EAAUX,EAAU,CACtBoG,WAAYA,IAEVE,EAAWrC,iBAAO,MAzByD,EA0B3ChB,mBAAgC,MA1BW,mBA0B1EsD,EA1B0E,KA0B7DC,EA1B6D,OA2B/CvD,oBAAS,GA3BsC,mBA2B1EwD,EA3B0E,KA2B/DC,EA3B+D,KA4B3EC,GLpDyBtB,EKoDFhE,ELpDQiE,EKoDHI,ELnD3BkB,mBAAQ,WACX,OAAY,MAARvB,GAAwB,MAARC,EACT,KAEJ,SAACuB,GACJzF,EAAOiE,EAAMwB,GACbzF,EAAOkE,EAAMuB,MAElB,CAACxB,EAAMC,KK4COwB,EAAqB7C,iBAAmB,MAAZgC,GAArC1E,QACFwF,EAAU9C,iBAAgC,MA9BiC,EC3BtE,YAG+C,IAF1D+C,EAEyD,EAFzDA,WACSC,EACgD,EADzDC,QAEiBC,EAAiBlD,sBAAsBmD,IAAfJ,GAAjCzF,QADiD,EAE1B0B,mBAASgE,GAFiB,mBAElDI,EAFkD,KAEtCC,EAFsC,KAWzD,MAAO,EARgBH,EAAeH,EAAaK,IAAe,GAEnC3D,uBAAY,SAAC6D,GACnCJ,GACDG,EAASC,KAEd,KD+CuBC,CAAc,CACpCR,WAAYlB,EACZoB,QAASrB,IAlCoE,mBAgC1EvE,EAhC0E,KAgCnEgG,EAhCmE,KA+CjFG,8BAAoBd,GAVC,iBAAO,CACxBe,MAAO,WACwB,oBAAhBnB,GACPA,EAAamB,SAGrBC,KAAMrB,EAAS/E,QACfD,MAAOA,KAGkC,CAACiF,EAAajF,IAE3D+B,qBAAU,WACFsC,GAAaY,GACc,oBAAhBA,GACPA,EAAamB,UAGtB,CAAC/B,EAAWY,EAAaQ,IAE5B1D,qBAAU,WACN,GAAIkD,GAAeX,GAAkC,oBAAhBW,EAA4B,CAC7D,IAAMqB,EAAYrB,EAAasB,cAAcC,eAAelC,GAC5D,GAAIgC,EAAW,CACX,IAAMG,EAAU,WACRC,cAAgBA,eAAgBC,aACL,oBAAhB1B,GACPA,EAAamB,SAKzB,OADAE,EAAUM,iBAAiB,QAASH,GAC7B,WACHH,EAAUO,oBAAoB,QAASJ,QAMpD,CAACnC,EAASW,IAEb,IAgEI6B,EAhEEC,EAAgB,SAClBC,EACAC,GAEA,OAAIA,GAAYA,EAASC,mBACdD,EAASC,mBAEA,oBAATF,EACP,OAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAM/G,eAAb,aAAO,EAAekH,gBAD1B,EAAiC,IAAD,GAM9BC,EAAgB,SAClBJ,EACAC,GAEA,OAAIA,GAAYA,EAASI,uBACdJ,EAASI,uBAEA,oBAATL,EACP,OAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAM/G,eAAb,aAAO,EAAeqH,eAD1B,EAAiC,IAAD,GAM9BC,EAA0B,SAC5BP,EACAC,EACAO,GAKA,IAAMC,EAAoBD,EAAsBR,EAAMC,GACrC,OAAjBQ,QAAiB,IAAjBA,KAAmBrB,SAGjBsB,EAAgB,SAACC,GACnB,IAAKzD,EAAU,CACX,IAAM0D,GExJoBvB,EFwJWZ,EEvJrCY,GAAQA,EAAKE,eAAkB3E,UFuJeiG,cAE9C,OADkB,CAAC,GAAI,UAAW,YAAa,QAAS,UACtCC,QAAQH,EAAElE,MACxB,KAAK,EACDsE,GAAO,EAAOJ,GACd,MACJ,KAAK,EACDA,EAAEjE,iBACFqE,GAAO,EAAOJ,GACd,MACJ,KAAK,EACDA,EAAEjE,iBACF6D,EAAwB9B,EAASmC,EAAgBR,GACjD,MACJ,KAAK,EACDO,EAAEjE,iBACF6D,EAAwB9B,EAASmC,EAAgBb,IExKtD,IAAuBV,GFkL5B2B,EAAgB7G,IAAM0B,SAASoF,QAAQ3G,GAkBvCyG,EAAS,SAACnD,EAAqBpB,GAC7BoB,GACIF,GACAA,EAAOlB,GAGX5B,SAASI,KAAKkG,MAAQ,qBAGtBtG,SAASI,KAAKkG,MAAQ,iBAClB9G,GACAA,EAAQoC,IAIXgC,GACDJ,EAAaR,IAIfhE,GAAQoH,EAAclF,KAAI,SAACC,GAC7B,IAAK5B,IAAM8B,eAAeF,GACtB,OAAO,KAGX,IAAMtD,EAxMd,SAAwB0I,EAAcC,GAClC,GAAiB,kBAAND,GAA+B,kBAANC,EAChC,OAAOD,IAAMC,EAEjB,GAAID,GAAKC,EAAG,CACR,IAAMC,EAAgBC,OAAOC,QAAQJ,GAC/BK,EAAgBF,OAAOC,QAAQH,GACrC,OAAIC,EAAKI,SAAWD,EAAKC,QAClBJ,EAAKK,OAAM,WAAiB1F,GAAjB,6BAAqCwF,EAAKxF,GAAO,MAEvE,OAAO,EA8Lc2F,CAAe3I,EAAO+C,EAAM3D,MAAMY,OAE/CP,IACAqH,EAAU/D,EAAM3D,MAAMY,OAG1B,IAAyB4I,EAsCzB,OAAOzH,IAAMgC,aAAaJ,EAAO,CAC7B,gBAAiBtD,EAAW,YAASqG,EACrCpG,SAxCqBkJ,EAwCI7F,EAxC4C,SAACS,GACtE,IAAMyC,EAAW2C,EAAiBxJ,MAAMY,MAEpC4I,EAAiBxJ,MAAMM,SACvBkJ,EAAiBxJ,MAAMM,QAAQ8D,GAG/BxD,IAAUiG,IACVD,EAASC,GACLxB,IACAjB,EAAMqF,UACNpE,EAASwB,KAIjB8B,GAAO,EAAOvE,KA0BdsF,QAAS,SAACtF,GACY,MAAdA,EAAMC,KACND,EAAME,iBAGNX,EAAM3D,MAAM0J,SACZ/F,EAAM3D,MAAM0J,QAAQtF,IAG5B5D,UAhCsB,SAACgJ,GAAD,OAAiD,SAACpF,GACxE,GAAkB,UAAdA,EAAMC,IAAiB,CACvB,IAAMwC,EAAW2C,EAAiBxJ,MAAMY,MAEpC4I,EAAiBxJ,MAAMQ,WACvBgJ,EAAiBxJ,MAAMQ,UAAU4D,GAGjCxD,IAAUiG,IACVD,EAASC,GACLxB,IACAjB,EAAMqF,UACNpE,EAASwB,KAIjB8B,GAAO,EAAOvE,KAgBPuF,CAAkBhG,GAC7B1B,KAAM,SACN5B,WACAO,WAAO8F,EACP,aAAc/C,EAAM3D,MAAMY,WAqBlC,OACI,yBAAKV,UAAWF,EAAME,WAClB,2BAAO0J,YAAa9E,OAAW4B,EAff,SAAC6B,GACJ,IAAbA,EAAEsB,SAINtB,EAAEjE,iBACyB,oBAAhBuB,IACI,OAAXA,QAAW,IAAXA,KAAamB,SAGjB2B,GAAO,EAAMJ,MAML,2BACI3H,MAAOkJ,MAAMC,QAAQnJ,GAASA,EAAMoJ,KAAK,KAAOpJ,EAChDmE,KAAMA,EACNpE,IAAKiF,EACLP,SAjIK,SAACkD,GAClB0B,QAAQC,IAAI3B,EAAE4B,QACd,IAAMvG,EAAQgF,EAAclF,KAAI,SAACC,GAAD,OAAYA,EAA6B3D,MAAMY,SAAO8H,QAAQH,EAAE4B,OAAOvJ,OAEvG,IAAe,IAAXgD,EAAJ,CAIA,IAAMD,EAAQiF,EAAchF,GAC5BgD,EAAUjD,EAA6B3D,MAAMY,OAEzCyE,GACAA,EAASkD,EAAE4B,OAAOvJ,SAsHVL,UAAW,EACX0E,UAAWA,EACX/E,UAAWD,EAAQmK,QAEvB,yBAAKlK,UAAWD,EAAQoK,cACnB9F,EAAQmD,GAAWjC,EAAQ,0BAAM6E,wBAAyB,CAAEC,OAAQ,cAEzE,yBACIrK,UAAWC,YAAKwF,EAAkB1F,EAAQuK,4BAC1C7J,IAAKmF,EACL7D,KAAK,SACLwI,gBAAe3G,EAAW,YAAS4C,EACnCgE,gBAAc,UACdC,aAAY9F,EACZrE,UAAW8H,EACX/H,SAAU,GAETgE,EAAQmD,GAAW,0BAAM4C,wBAAyB,CAAEC,OAAQ,aAAkB7C,IAGvF,kBAAC,EAAD,CACIjG,GAAE,eAAUsD,GAAQ,IACpB3C,OAAQ2D,EACR/D,QAhDQ,SAACoC,GACjBuE,GAAO,EAAOvE,IAgDN5D,UAAW8H,EACX/G,cAAeA,EACfc,UAAWwD,EACXlF,IAAK0F,GAEJ7E,QAeXlC,EAAYC,aAAgB,SAACS,GAAD,MAAyB,CACvDoK,MAAO,CACHQ,OAAQ,EACRxJ,KAAM,EACNJ,SAAU,WACV6J,QAAS,EACTC,cAAe,QAEnBN,2BAA4B,CACxB7I,MAAO,kBAAM3B,EAAM2B,OAAS,qBAC5BoJ,SAAU,IACVnJ,OAAQ,kBAAM5B,EAAM4B,QAAU,IAC9BoJ,OAAQ,kBAAMhL,EAAMgL,QAAN,qBACd/J,QAAS,kBAAMjB,EAAMiB,SAAW,iBAChCV,SAAU,IACV,UAAW,CACP0K,YAAa,QAGrBZ,aAAc,CACV3K,MAAO,kBAAMM,EAAM0F,YAAc,WACjCwF,UAAW,qCACM,EADN,OAEHlL,EAAM4B,QACD5B,EAAMmL,WAAanL,EAAMmL,WAAaC,OAAOC,UAAUrL,EAAMiB,SAAWjB,EAAMiB,QAAU,EAAI,IACjG,KAJG,sBASJyD,IG1XTpF,EAAYC,YAAgB,CAC9B+L,aAAc,CACV3J,MAAO,OACP4J,WAAY,IAEhBhK,cAAe,CACXI,MAAO,KAEXvB,qBAAsB,CAClBa,QAAS,WACTuK,aAAc,mBAElB,UAAW,CACP5I,KAAM,CACF6I,OAAQ,MA2FLC,MAjFf,WACI,IAAMzL,EAAUX,IACVqM,EAA8B,CAChC,CAAE/K,MAAO,KAAMH,eAAgB,wCAC/B,CAAEG,MAAO,KAAMH,eAAgB,oDAC/B,CAAEG,MAAO,KAAMH,eAAgB,qDALY,EAQrB8B,mBAAS,IARY,mBAQxC3B,EARwC,KAQjCgG,EARiC,OASnBrE,mBAAS,IATU,mBASxCqJ,EATwC,KAShCC,EATgC,OAUnBtJ,mBAAS,IAVU,mBAUxCuJ,EAVwC,KAUhCC,EAVgC,KAsB/C,OACI,6BACI,kBAAC,EAAD,CACI1G,SAbS,SAACwB,GAClBD,EAASC,IAaDjG,MAAOA,EACPV,UAAWD,EAAQqL,aACnB7F,MAAM,QACNlE,cAAetB,EAAQsB,cACvB8C,IAAK,OAEJsH,EAAUjI,KAAI,SAACsI,GAAD,OACX,kBAAC,EAAD,CACI5L,qBAAsBH,EAAQG,qBAC9BQ,MAAOoL,EAAUpL,MACjBH,eAAgBuL,EAAUvL,eAC1B4D,IAAK2H,EAAUpL,YAK3B,kBAAC,EAAD,CACIyE,SA5BU,SAACwB,GACnBgF,EAAUhF,IA4BFjG,MAAOgL,EACP1L,UAAWD,EAAQqL,aACnB7F,MAAM,QACNlE,cAAetB,EAAQsB,cACvB8C,IAAK,OAEJsH,EAAUjI,KAAI,SAACsI,GAAD,OACX,kBAAC,EAAD,CACI5L,qBAAsBH,EAAQG,qBAC9BQ,MAAOoL,EAAUpL,MACjBH,eAAgBuL,EAAUvL,eAC1B4D,IAAK2H,EAAUpL,YAK3B,kBAAC,EAAD,CACIyE,SA3CU,SAACwB,GACnBkF,EAAUlF,IA2CFjG,MAAOkL,EACP5L,UAAWD,EAAQqL,aACnB7F,MAAM,QACNlE,cAAetB,EAAQsB,cACvB8C,IAAK,OAEJsH,EAAUjI,KAAI,SAACsI,GAAD,OACX,kBAAC,EAAD,CACI5L,qBAAsBH,EAAQG,qBAC9BQ,MAAOoL,EAAUpL,MACjBH,eAAgBuL,EAAUvL,eAC1B4D,IAAK2H,EAAUpL,cCnGvCqL,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ3J,SAAS4E,eAAe,W","file":"static/js/main.20541cc3.chunk.js","sourcesContent":["import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport clsx from 'clsx';\nimport { IBlackMenuList } from '../interfaces';\n\nconst useStyles = createUseStyles({\n    menuListElement: {\n        fontSize: 20,\n        color: 'white',\n        listStyle: 'none',\n        cursor: 'pointer',\n        '&:focus, &:hover': {\n            background: 'gray',\n        },\n    },\n    selectedMenuList: {\n        color: 'black',\n        background: 'white',\n    },\n});\n\nconst BlackMenuListElement = (props: IBlackMenuList): React.ReactElement<HTMLLIElement> => {\n    const classes = useStyles();\n    return (\n        <li\n            className={clsx(\n                classes.menuListElement,\n                props.listElementClassName,\n                props.selected && classes.selectedMenuList,\n            )}\n            onClick={props.onClick}\n            tabIndex={1}\n            onKeyDown={props.onKeyDown}\n        >\n            {props.displayedValue}\n        </li>\n    );\n};\n\nexport default BlackMenuListElement;\n","import { useMemo } from 'react';\n\nconst setRef = function (ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n};\n\nexport default function useForkRef(refA, refB) {\n    return useMemo(() => {\n        if (refA == null && refB == null) {\n            return null;\n        }\n        return (refValue) => {\n            setRef(refA, refValue);\n            setRef(refB, refValue);\n        };\n    }, [refA, refB]);\n}\n","import React, { forwardRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport clsx from 'clsx';\nimport { IMenuListProps } from '../../../interfaces';\n\nconst useStyles = createUseStyles<{ positionStyle: { top: number; left: number } }>({\n    menu: {\n        backgroundColor: 'black',\n        position: 'fixed',\n        padding: 0,\n    },\n    positionStyle: {\n        top: ({ positionStyle }) => positionStyle?.top,\n        left: ({ positionStyle }) => positionStyle?.left,\n    },\n});\n\nconst MenuList = forwardRef<HTMLUListElement, IMenuListProps>(\n    (props: IMenuListProps, ref: React.Ref<HTMLUListElement>) => {\n        const { listClassName, items, positionStyle } = props;\n        const classes = useStyles({ positionStyle });\n        return (\n            <ul\n                className={clsx(classes.menu, listClassName, classes.positionStyle)}\n                ref={ref}\n                tabIndex={0}\n                onKeyDown={props.onKeyDown}\n                id={props.id}\n            >\n                {items}\n            </ul>\n        );\n    },\n);\n\nexport default MenuList;\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { IPopover } from '../../../interfaces';\n\nconst useStyles = createUseStyles({\n    popover: {\n        width: '100vw',\n        height: '100vh',\n        position: 'absolute',\n        top: 0,\n        overflow: 'hidden',\n    },\n});\n\nconst Popover = React.forwardRef((props: IPopover, ref: React.Ref<HTMLDivElement>) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.popover} ref={ref} onClick={props.onClose} role=\"popover\">\n            {props.children}\n        </div>\n    );\n});\n\nexport default Popover;\n","function setRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\n\nexport default setRef;\n","import React, { forwardRef, useRef, Children, isValidElement, useEffect, useState, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nimport MenuList from './MenuList';\nimport Popover from './Popover';\nimport { IMenuProps } from '../../../interfaces';\nimport setRef from '../../../utils/setRef';\n\nconst Menu = forwardRef<HTMLUListElement, IMenuProps>((props, ref) => {\n    const { children, onClose, isOpen, anchorRef, marginThreshold = 16, listClassName, id } = props;\n\n    const [containerEl] = useState(document.createElement('div'));\n\n    useEffect(() => {\n        document.body.appendChild(containerEl);\n        return () => {\n            document.body.removeChild(containerEl);\n        };\n    });\n\n    const getPositionStyle = useCallback(\n        (element) => {\n            let top = element.offsetTop;\n            const left = element.offsetLeft;\n            if (top < marginThreshold) {\n                const diff = top - marginThreshold;\n                top -= diff;\n            }\n            return {\n                top: Math.round(top),\n                left: Math.round(left),\n            };\n        },\n        [anchorRef, marginThreshold],\n    );\n\n    const contentAnchorRef = useRef<React.Ref<HTMLUListElement>>(null);\n\n    const handleListKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === 'Tab') {\n            event.preventDefault();\n\n            if (onClose) {\n                onClose(event);\n            }\n        }\n    };\n\n    let activeItemIndex = -1;\n\n    Children.map(children, (child, index) => {\n        if (!isValidElement(child)) {\n            return;\n        }\n\n        if (!child.props.disabled) {\n            if (child.props.selected || activeItemIndex === -1) {\n                activeItemIndex = index;\n            }\n        }\n    });\n\n    const getItems = (children: React.ReactNode | undefined) =>\n        Children.map(children, (child, index: number) => {\n            if (index === activeItemIndex) {\n                return React.cloneElement(child as React.ReactElement, {\n                    ref: (\n                        instance: ((instance: HTMLUListElement | null) => void) | null | React.Ref<HTMLUListElement>,\n                    ) => {\n                        contentAnchorRef.current = instance;\n                        // @ts-ignore\n                        setRef(child?.ref, instance);\n                    },\n                });\n            }\n\n            return child;\n        });\n\n    const items = getItems(children);\n\n    if (isOpen) {\n        return createPortal(\n            <Popover onClose={onClose} handleListKeyDown={handleListKeyDown}>\n                <MenuList\n                    items={items}\n                    ref={ref}\n                    listClassName={listClassName}\n                    positionStyle={getPositionStyle(anchorRef)}\n                    onKeyDown={props.onKeyDown}\n                    id={id}\n                />\n            </Popover>,\n            containerEl,\n        );\n    }\n\n    return <div />;\n});\n\nexport default Menu;\n","import React, { useState, useRef, useImperativeHandle, useEffect } from 'react';\nimport clsx from 'clsx';\nimport useForkRef from '../../hooks/useForkRef';\nimport useControlled from '../../hooks/useControlled';\n\nimport Menu from './components/Menu';\n\nimport { createUseStyles } from 'react-jss';\nimport { ISelectProps, IBlackMenuList } from '../../interfaces';\nimport ownerDocument from '../../utils/ownerDocument';\n\nfunction isEmpty(displayValue: null | string | undefined): null | string | boolean {\n    return displayValue == null || (typeof displayValue === 'string' && !displayValue.trim());\n}\n\ntype Entry = [string, string];\n\ntype Entries = Array<Entry>;\n\ntype valueType = string | undefined | ((newValue: string) => void);\n\nfunction areEqualValues(a: valueType, b: valueType): boolean {\n    if (typeof a === 'string' && typeof b === 'string') {\n        return a === b;\n    }\n    if (a && b) {\n        const ent1: Entries = Object.entries(a);\n        const ent2: Entries = Object.entries(b);\n        if (ent1.length !== ent2.length) return false;\n        return ent1.every(([value]: Entry, index) => value === ent2[index][1]);\n    }\n    return false;\n}\n\nconst BlackSelect = React.forwardRef<HTMLUListElement, ISelectProps>((props, ref) => {\n    const {\n        disabled,\n        ariaLabel,\n        readOnly,\n        name,\n        inputRefProp,\n        autoFocus,\n        labelId,\n        defaultValue,\n        value: valueProp,\n        onChange,\n        children,\n        onOpen,\n        onClose,\n        openSelect: openProp,\n        label,\n        listClassName,\n        labelColor,\n        displayClassName,\n    } = props;\n\n    const classes = useStyles({\n        labelColor: labelColor,\n    });\n    const inputRef = useRef(null);\n    const [displayNode, setDisplayNode] = useState<HTMLDivElement | null>(null);\n    const [openState, setOpenState] = useState(false);\n    const handleRef = useForkRef(ref, inputRefProp);\n    const { current: isOpenControlled } = useRef(openProp != null);\n    const menuRef = useRef<HTMLUListElement | null>(null);\n\n    const [value, setValue] = useControlled({\n        controlled: valueProp,\n        default: defaultValue,\n    });\n\n    const createHandle = () => ({\n        focus: () => {\n            if (typeof displayNode !== 'function') {\n                displayNode!.focus();\n            }\n        },\n        node: inputRef.current,\n        value: value,\n    });\n\n    useImperativeHandle(handleRef, createHandle, [displayNode, value]);\n\n    useEffect(() => {\n        if (autoFocus && displayNode) {\n            if (typeof displayNode !== 'function') {\n                displayNode!.focus();\n            }\n        }\n    }, [autoFocus, displayNode, menuRef]);\n\n    useEffect(() => {\n        if (displayNode && labelId && typeof displayNode !== 'function') {\n            const labelElem = displayNode!.ownerDocument.getElementById(labelId);\n            if (labelElem) {\n                const handler = () => {\n                    if (getSelection && getSelection()!.isCollapsed) {\n                        if (typeof displayNode !== 'function') {\n                            displayNode!.focus();\n                        }\n                    }\n                };\n                labelElem.addEventListener('click', handler);\n                return () => {\n                    labelElem.removeEventListener('click', handler);\n                };\n            }\n        }\n\n        return undefined;\n    }, [labelId, displayNode]);\n\n    const focusNextElem = (\n        list: React.Ref<HTMLUListElement | null>,\n        listElem: HTMLLIElement | null,\n    ): ChildNode | undefined | null => {\n        if (listElem && listElem.nextElementSibling) {\n            return listElem.nextElementSibling;\n        }\n        if (typeof list !== 'function') {\n            return list?.current?.firstChild;\n        }\n        return;\n    };\n\n    const focusPrevElem = (\n        list: React.Ref<HTMLUListElement | null>,\n        listElem: HTMLLIElement | null,\n    ): ChildNode | undefined | null => {\n        if (listElem && listElem.previousElementSibling) {\n            return listElem.previousElementSibling as HTMLLIElement;\n        }\n        if (typeof list !== 'function') {\n            return list?.current?.lastChild;\n        }\n        return;\n    };\n\n    const keyboardListElemActions = (\n        list: React.Ref<HTMLUListElement | null>,\n        listElem: HTMLLIElement | null,\n        focusListElemFunction: (\n            list: React.Ref<HTMLUListElement | null> | null,\n            listElem: HTMLLIElement | null,\n        ) => ChildNode | null | undefined,\n    ) => {\n        const nextFocusListElem = focusListElemFunction(list, listElem) as HTMLLIElement;\n        nextFocusListElem?.focus();\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n        if (!readOnly) {\n            const activeListElem = ownerDocument(menuRef).activeElement;\n            const validKeys = ['', 'ArrowUp', 'ArrowDown', 'Enter', 'Escape'];\n            switch (validKeys.indexOf(e.key)) {\n                case 3:\n                    update(false, e);\n                    break;\n                case 4:\n                    e.preventDefault();\n                    update(false, e);\n                    break;\n                case 1:\n                    e.preventDefault();\n                    keyboardListElemActions(menuRef, activeListElem, focusPrevElem);\n                    break;\n                case 2:\n                    e.preventDefault();\n                    keyboardListElemActions(menuRef, activeListElem, focusNextElem);\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    let display;\n\n    const childrenArray = React.Children.toArray(children);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement> | { target: { value: string } }) => {\n        console.log(e.target);\n        const index = childrenArray.map((child) => (child as React.ReactElement).props.value).indexOf(e.target.value);\n\n        if (index === -1) {\n            return;\n        }\n\n        const child = childrenArray[index];\n        setValue((child as React.ReactElement).props.value);\n\n        if (onChange) {\n            onChange(e.target.value);\n        }\n    };\n\n    const update = (openSelect: boolean, event: React.MouseEvent | React.KeyboardEvent) => {\n        if (openSelect) {\n            if (onOpen) {\n                onOpen(event);\n            }\n            // @ts-ignore\n            document.body.style = 'overflow: hidden';\n        } else {\n            // @ts-ignore\n            document.body.style = 'overflow: auto';\n            if (onClose) {\n                onClose(event);\n            }\n        }\n\n        if (!isOpenControlled) {\n            setOpenState(openSelect);\n        }\n    };\n\n    const items = childrenArray.map((child) => {\n        if (!React.isValidElement(child)) {\n            return null;\n        }\n\n        const selected = areEqualValues(value, child.props.value);\n\n        if (selected) {\n            display = child.props.value;\n        }\n\n        const handleItemClick = (listElementChild: { props: IBlackMenuList }) => (event: React.MouseEvent) => {\n            const newValue = listElementChild.props.value;\n\n            if (listElementChild.props.onClick) {\n                listElementChild.props.onClick(event);\n            }\n\n            if (value !== newValue) {\n                setValue(newValue);\n                if (onChange) {\n                    event.persist();\n                    onChange(newValue);\n                }\n            }\n\n            update(false, event);\n        };\n\n        const handleItemKeyDown = (listElementChild: { props: IBlackMenuList }) => (event: React.KeyboardEvent) => {\n            if (event.key === 'Enter') {\n                const newValue = listElementChild.props.value;\n\n                if (listElementChild.props.onKeyDown) {\n                    listElementChild.props.onKeyDown(event);\n                }\n\n                if (value !== newValue) {\n                    setValue(newValue);\n                    if (onChange) {\n                        event.persist();\n                        onChange(newValue);\n                    }\n                }\n\n                update(false, event);\n            }\n        };\n\n        return React.cloneElement(child, {\n            'aria-selected': selected ? 'true' : undefined,\n            onClick: handleItemClick(child),\n            onKeyUp: (event: React.KeyboardEvent) => {\n                if (event.key === ' ') {\n                    event.preventDefault();\n                }\n\n                if (child.props.onKeyUp) {\n                    child.props.onKeyUp(event);\n                }\n            },\n            onKeyDown: handleItemKeyDown(child),\n            role: 'option',\n            selected,\n            value: undefined,\n            'data-value': child.props.value,\n        });\n    });\n\n    const handleClose = (event: React.KeyboardEvent | React.MouseEvent) => {\n        update(false, event);\n    };\n\n    const handleMouseDown = (e: React.MouseEvent) => {\n        if (e.button !== 0) {\n            return;\n        }\n\n        e.preventDefault();\n        if (typeof displayNode !== 'function') {\n            displayNode?.focus();\n        }\n\n        update(true, e);\n    };\n\n    return (\n        <div className={props.className}>\n            <label onMouseDown={readOnly ? undefined : handleMouseDown}>\n                <input\n                    value={Array.isArray(value) ? value.join(',') : value}\n                    name={name}\n                    ref={inputRef}\n                    onChange={handleChange}\n                    tabIndex={-1}\n                    autoFocus={autoFocus}\n                    className={classes.input}\n                />\n                <div className={classes.defaultLabel}>\n                    {isEmpty(display) ? label : <span dangerouslySetInnerHTML={{ __html: '&#8203;' }} />}\n                </div>\n                <div\n                    className={clsx(displayClassName, classes.defaultSelectorInputStyles)}\n                    ref={setDisplayNode}\n                    role=\"button\"\n                    aria-disabled={disabled ? 'true' : undefined}\n                    aria-haspopup=\"listbox\"\n                    aria-label={ariaLabel}\n                    onKeyDown={handleKeyDown}\n                    tabIndex={0}\n                >\n                    {isEmpty(display) ? <span dangerouslySetInnerHTML={{ __html: '&#8203;' }} /> : display}\n                </div>\n            </label>\n            <Menu\n                id={`menu-${name || ''}`}\n                isOpen={openState}\n                onClose={handleClose}\n                onKeyDown={handleKeyDown}\n                listClassName={listClassName}\n                anchorRef={displayNode}\n                ref={menuRef}\n            >\n                {items}\n            </Menu>\n        </div>\n    );\n});\n\ninterface stylesProps {\n    width: string;\n    height: string;\n    border: string;\n    padding: number;\n    labelColor: string;\n    paddingTop: string;\n}\n\nconst useStyles = createUseStyles((props: stylesProps) => ({\n    input: {\n        bottom: 0,\n        left: 0,\n        position: 'absolute',\n        opacity: 0,\n        pointerEvents: 'none',\n    },\n    defaultSelectorInputStyles: {\n        width: () => props.width || 'calc(100% - 10px)',\n        minWidth: 120,\n        height: () => props.height || 19,\n        border: () => props.border || `1px solid #c1c1c1`,\n        padding: () => props.padding || '5px 0 5px 5px',\n        tabIndex: '0',\n        '&:focus': {\n            borderColor: 'red',\n        },\n    },\n    defaultLabel: {\n        color: () => props.labelColor || '#c1c1c1',\n        transform: () =>\n            `translate(${5}px, ${\n                props.height +\n                    (props.paddingTop ? props.paddingTop : Number.isInteger(props.padding) ? props.padding / 2 : 0) ||\n                21.5\n            }px) scale(1)`,\n    },\n}));\n\nexport default BlackSelect;\n","import { useRef, useState, useCallback } from 'react';\n\ninterface useControlledProps {\n    controlled?: string;\n    default?: string;\n}\n\nexport default function useControlled({\n    controlled,\n    default: defaultProp,\n}: useControlledProps): [string, (newValue: string) => void] {\n    const { current: isControlled } = useRef(controlled !== undefined);\n    const [valueState, setValue] = useState(defaultProp);\n    const value: string = (isControlled ? controlled : valueState) || '';\n\n    const setValueIfUncontrolled = useCallback((newValue) => {\n        if (!isControlled) {\n            setValue(newValue);\n        }\n    }, []);\n\n    return [value, setValueIfUncontrolled];\n}\n","export default function ownerDocument(node) {\n    return (node && node.ownerDocument) || document;\n}\n","import React, { useState } from 'react';\nimport { createUseStyles } from 'react-jss';\n\nimport BlackMenuListElement from './components/BlackMenuListElement';\nimport BlackSelect from './components/BlackSelect';\n\nconst useStyles = createUseStyles({\n    selectStyles: {\n        width: '50vw',\n        marginLeft: 20,\n    },\n    listClassName: {\n        width: 200,\n    },\n    listElementClassName: {\n        padding: '2px 20px',\n        borderBottom: '1px solid white',\n    },\n    '@global': {\n        body: {\n            margin: 0,\n        },\n    },\n});\n\ninterface ISelector {\n    value: string;\n    displayedValue: string;\n}\n\nfunction App(): React.ReactElement<HTMLDivElement> {\n    const classes = useStyles();\n    const selectors: Array<ISelector> = [\n        { value: '10', displayedValue: 'Десять' },\n        { value: '20', displayedValue: 'Двадцать' },\n        { value: '30', displayedValue: 'Тридцать' },\n    ];\n\n    const [value, setValue] = useState('');\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n\n    const handleChange = (newValue: string): void => {\n        setValue(newValue);\n    };\n    const handleChange1 = (newValue: string): void => {\n        setValue1(newValue);\n    };\n    const handleChange2 = (newValue: string): void => {\n        setValue2(newValue);\n    };\n\n    return (\n        <div>\n            <BlackSelect\n                onChange={handleChange}\n                value={value}\n                className={classes.selectStyles}\n                label=\"Label\"\n                listClassName={classes.listClassName}\n                key={'bs1'}\n            >\n                {selectors.map((menuProps) => (\n                    <BlackMenuListElement\n                        listElementClassName={classes.listElementClassName}\n                        value={menuProps.value}\n                        displayedValue={menuProps.displayedValue}\n                        key={menuProps.value}\n                    />\n                ))}\n            </BlackSelect>\n\n            <BlackSelect\n                onChange={handleChange1}\n                value={value1}\n                className={classes.selectStyles}\n                label=\"Label\"\n                listClassName={classes.listClassName}\n                key={'bs2'}\n            >\n                {selectors.map((menuProps) => (\n                    <BlackMenuListElement\n                        listElementClassName={classes.listElementClassName}\n                        value={menuProps.value}\n                        displayedValue={menuProps.displayedValue}\n                        key={menuProps.value}\n                    />\n                ))}\n            </BlackSelect>\n\n            <BlackSelect\n                onChange={handleChange2}\n                value={value2}\n                className={classes.selectStyles}\n                label=\"Label\"\n                listClassName={classes.listClassName}\n                key={'bs3'}\n            >\n                {selectors.map((menuProps) => (\n                    <BlackMenuListElement\n                        listElementClassName={classes.listElementClassName}\n                        value={menuProps.value}\n                        displayedValue={menuProps.displayedValue}\n                        key={menuProps.value}\n                    />\n                ))}\n            </BlackSelect>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}